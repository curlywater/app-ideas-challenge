{"version":3,"sources":["projects/Bin2Dec/Components/LimitSetting.js","projects/Bin2Dec/Components/Output.js","projects/Bin2Dec/App.js"],"names":["LimitInput","styled","input","_templateObject","LimitSetting","_ref","value","onChange","inputEl","useRef","checkboxEl","handleCheckboxChange","useCallback","event","target","checked","current","Infinity","handleInputChange","Object","core_browser_esm","css","_templateObject2","type","_templateObject3","ref","min","defaultValue","Warning","p","Output_templateObject","DecimalResult","decimal","style","color","letterSpacing","margin","padding","Output","_ref2","limit","binaryString","digitCount","length","match","parseInt","isNaN","Output_DecimalResult","Wrapper","div","App_templateObject","Heading","h1","App_templateObject2","Input","props","assign","App_templateObject3","App","_useState","useState","_useState2","slicedToArray","setLimit","_useState3","_useState4","setBinaryString","styles","_templateObject4","App_Input"],"mappings":"6kBAKA,IAAMA,EAAaC,IAAOC,MAAVC,KAUD,SAASC,EAATC,GAA2C,IAAlBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,SACvCC,EAAUC,iBAAO,MACjBC,EAAaD,iBAAO,MACpBE,EAAuBC,sBAC3B,SAACC,GACCN,EAASM,EAAMC,OAAOC,QAAUP,EAAQQ,QAAQV,MAAQW,MAE1D,CAACV,EAAUC,IAEPU,EAAoBN,sBACxB,SAACC,GACKH,EAAWM,QAAQD,SACrBR,EAASM,EAAMC,OAAOR,QAG1B,CAACI,EAAYH,IAEf,OACEY,OAAAC,EAAA,EAAAD,CAAA,OACEE,IAAKA,YAAFC,MAIHH,OAAAC,EAAA,EAAAD,CAAA,SACEI,KAAK,WACLF,IAAKA,YAAFG,KAGHT,QAAST,IAAUW,IACnBV,SAAUI,EACVc,IAAKf,IAZT,qBAeES,OAAAC,EAAA,EAAAD,CAACnB,EAAD,CACEuB,KAAK,SACLG,IAAI,IACJC,aAAcrB,EACdmB,IAAKjB,EACLD,SAAUW,IApBd,8FC9BJ,IAAMU,EAAU3B,IAAO4B,EAAVC,KAIPC,EAAgB,SAAA1B,GAAA,IAAG2B,EAAH3B,EAAG2B,QAAH,OACpBb,OAAAC,EAAA,EAAAD,CAAA,kCAEEA,OAAAC,EAAA,EAAAD,CAAA,QACEc,MAAO,CACLC,MAAO,UACPC,cAAe,EACfC,OAAQ,QACRC,QAAS,IAGVL,KAKQ,SAASM,EAATC,GAAyC,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,aAChCC,EAAaD,EAAaE,OAChC,GAAIF,EAAaG,MAAM,SACrB,OACEzB,OAAAC,EAAA,EAAAD,CAACS,EAAD,mEAIG,GAAIc,EAAaF,EACtB,OACErB,OAAAC,EAAA,EAAAD,CAACS,EAAD,4BACuBY,EADvB,qCAIG,GAAmB,IAAfE,EACT,OAAOvB,OAAAC,EAAA,EAAAD,CAAA,6DAEP,IAAMa,EAAUa,SAASJ,EAAc,GACvC,OAAIK,MAAMd,GAENb,OAAAC,EAAA,EAAAD,CAACS,EAAD,yDAGKT,OAAAC,EAAA,EAAAD,CAAC4B,EAAD,CAAef,QAASA,ozBCtCrC,IAAMgB,EAAU/C,IAAOgD,IAAVC,KAKPC,EAAUlD,IAAOmD,GAAVC,KAIPC,EAAQ,SAACC,GAAD,OACZpC,OAAAC,EAAA,EAAAD,CAAA,QAAAA,OAAAqC,OAAA,CACEjC,KAAK,OACLF,IAAKA,YAAFoC,MASCF,KAIO,SAASG,IAAM,IAAAC,EACFC,mBAAS,GADPC,EAAA1C,OAAA2C,EAAA,EAAA3C,CAAAwC,EAAA,GACrBnB,EADqBqB,EAAA,GACdE,EADcF,EAAA,GAAAG,EAEYJ,mBAAS,IAFrBK,EAAA9C,OAAA2C,EAAA,EAAA3C,CAAA6C,EAAA,GAErBvB,EAFqBwB,EAAA,GAEPC,EAFOD,EAAA,GAItB/C,EAAoBN,sBACxB,SAACC,GACCqD,EAAgBrD,EAAMC,OAAOR,QAE/B,CAAC4D,IAGH,OACE/C,OAAAC,EAAA,EAAAD,CAAC6B,EAAD,KACE7B,OAAAC,EAAA,EAAAD,CAACC,EAAA,EAAD,CACE+C,OAAQ9C,YAAF+C,OAYRjD,OAAAC,EAAA,EAAAD,CAACgC,EAAD,gBACAhC,OAAAC,EAAA,EAAAD,CAACf,EAAD,CAAcE,MAAOkC,EAAOjC,SAAUwD,IACtC5C,OAAAC,EAAA,EAAAD,CAACkD,EAAD,CAAO9D,SAAUW,IACjBC,OAAAC,EAAA,EAAAD,CAACmB,EAAD,CAAQE,MAAOA,EAAOC,aAAcA","file":"static/js/4.dbd1d5cf.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { useCallback,useRef } from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\n\nconst LimitInput = styled.input`\n  border: none;\n  border-bottom: 1px solid #fff;\n  background: transparent;\n  max-width: 4em;\n  color: #fff;\n  text-align: center;\n  outline: none;\n`;\n\nexport default function LimitSetting ({ value, onChange }){\n  const inputEl = useRef(null);\n  const checkboxEl = useRef(null);\n  const handleCheckboxChange = useCallback(\n    (event) => {\n      onChange(event.target.checked ? inputEl.current.value : Infinity);\n    },\n    [onChange, inputEl]\n  );\n  const handleInputChange = useCallback(\n    (event) => {\n      if (checkboxEl.current.checked) {\n        onChange(event.target.value);\n      }\n    },\n    [checkboxEl, onChange]\n  );\n  return (\n    <div\n      css={css`\n        margin-bottom: 1rem;\n      `}\n    >\n      <input\n        type=\"checkbox\"\n        css={css`\n          margin-right: 8px;\n        `}\n        checked={value !== Infinity}\n        onChange={handleCheckboxChange}\n        ref={checkboxEl}\n      />\n      Set limit upper to\n      <LimitInput\n        type=\"number\"\n        min=\"1\"\n        defaultValue={value}\n        ref={inputEl}\n        onChange={handleInputChange}\n      />\n      .\n    </div>\n  );\n};","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nconst Warning = styled.p`\n  color: #e74c3c\n`;\n\nconst DecimalResult = ({ decimal }) => (\n  <p>\n    The Decimal Number is:\n    <span\n      style={{\n        color: \"#27ae60\",\n        letterSpacing: 1,\n        margin: \"0.5em\",\n        padding: 0\n      }}\n    >\n      {decimal}\n    </span>\n  </p>\n);\n\nexport default function Output({ limit, binaryString }) {\n  const digitCount = binaryString.length;\n  if (binaryString.match(/[^01]/)) {\n    return (\n      <Warning>\n        You entered a non-binary digit (please enter only 0 or 1).\n      </Warning>\n    );\n  } else if (digitCount > limit) {\n    return (\n      <Warning>\n        You can enter up to {limit} binary digits in one input field\n      </Warning>\n    );\n  } else if (digitCount === 0) {\n    return <p>Enter a binary number, get a decimal conversion.</p>;\n  } else {\n    const decimal = parseInt(binaryString, 2);\n    if (isNaN(decimal)) {\n      return (\n        <Warning>Please check your input, the convert is invalid.</Warning>\n      );\n    } else {\n      return <DecimalResult decimal={decimal}></DecimalResult>;\n    }\n  }\n}\n","/** @jsx jsx */\nimport { useCallback, useState } from \"react\";\nimport \"normalize.css\";\nimport { Global, css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport LimitSetting from \"./Components/LimitSetting\";\nimport Output from \"./Components/Output\";\n\nconst Wrapper = styled.div`\n  width: 80%;\n  text-align: center;\n  margin: 0 auto;\n`;\nconst Heading = styled.h1`\n  font-size: 3rem;\n`;\n\nconst Input = (props) => (\n  <input\n    type=\"text\"\n    css={css`\n      border: none;\n      border-radius: 4px;\n      font-size: 2rem;\n      padding: 1rem;\n      outline: none;\n      width: 100%;\n      box-shadow: 0px 2px 2px;\n    `}\n    {...props}\n  />\n);\n\nexport default function App() {\n  const [limit, setLimit] = useState(8);\n  const [binaryString, setBinaryString] = useState(\"\");\n\n  const handleInputChange = useCallback(\n    (event) => {\n      setBinaryString(event.target.value);\n    },\n    [setBinaryString]\n  );\n\n  return (\n    <Wrapper>\n      <Global\n        styles={css`\n          * {\n            box-sizing: border-box;\n          }\n\n          body {\n            font-family: \"Source Sans Pro\", \"Helvetica Neue\", Arial, sans-serif;\n            background: #333;\n            color: #fff;\n          }\n        `}\n      />\n      <Heading>Bin2Dec</Heading>\n      <LimitSetting value={limit} onChange={setLimit} />\n      <Input onChange={handleInputChange} />\n      <Output limit={limit} binaryString={binaryString} />\n    </Wrapper>\n  );\n}\n"],"sourceRoot":""}